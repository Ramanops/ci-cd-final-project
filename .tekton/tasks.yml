# ---------------------------------
# Task: cleanup
# ---------------------------------
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task will clean up a workspace by deleting all the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        if [ -d "${WORKSPACE_SOURCE_PATH}" ]; then
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi
---
# ---------------------------------
# Task: nose (unit tests)
# ---------------------------------
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        nosetests $(params.args)
---
# ---------------------------------
# Pipeline: ci-cd-pipeline
# ---------------------------------
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-cd-pipeline
spec:
  params:
    - name: repo-url
    - name: branch
      default: main
    - name: build-image
      default: image-registry.openshift-image-registry.svc:5000/SN_ICR_NAMESPACE/tekton-lab:latest
    - name: app-name
      default: cicd-app
  workspaces:
    - name: output
  tasks:
    - name: cleanup
      taskRef:
        name: cleanup
      workspaces:
        - name: source
          workspace: output

    - name: git-clone
      runAfter: [cleanup]
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch)
      workspaces:
        - name: output
          workspace: output

    - name: lint
      runAfter: [git-clone]
      taskRef:
        name: flake8
        kind: ClusterTask
      params:
        - name: image
          value: python:3.9-slim
        - name: args
          value:
            - "--count"
            - "--max-complexity=10"
            - "--max-line-length=127"
            - "--statistics"
      workspaces:
        - name: source
          workspace: output

    - name: test
      runAfter: [lint]
      taskRef:
        name: nose
      params:
        - name: args
          value: "-v --with-spec --spec-color"
      workspaces:
        - name: source
          workspace: output

    - name: build
      runAfter: [test]
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: $(params.build-image)
      workspaces:
        - name: source
          workspace: output

    - name: deploy
      runAfter: [build]
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -
